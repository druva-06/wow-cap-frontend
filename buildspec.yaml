version: 0.2

env:
  variables:
    S3_BUCKET_NAME: career-adivce-partner
    EC2_INSTANCE_ID: i-08a40d8c2c9193d3b
    REGION: ap-south-2
    APP_DIR: /opt/cap/frontend
    SERVICE_NAME: wowcap-frontend
    NODE_VERSION_SETUP: "18"

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Install tools (zip/unzip)..."
      - apt-get update -y
      - apt-get install -y zip unzip
      - node -v || true
      - npm -v || true

  pre_build:
    commands:
      - echo "Installing project dependencies (full install for build)..."
      - npm ci

  build:
    commands:
      - echo "Building Next.js app for production (SSR)..."
      - npm run build
      - echo "Listing build artifacts:"
      - ls -la .next || true
      - ls -la public || true
      - ls -la package.json || true

  post_build:
    commands:
      - echo "Preparing server bundle..."
      - rm -f /tmp/build.zip || true
      - rm -rf /tmp/bundle || true
      - mkdir -p /tmp/bundle
      - echo "Copying required files to bundle..."
      - cp -r .next package.json package-lock.json public next.config.js /tmp/bundle/ || true
      - # include any other config or server files you need (e.g. server.js)
      - cd /tmp/bundle
      - zip -r /tmp/build.zip . || true
      - cd -
      - echo "Uploading build.zip to s3://$S3_BUCKET_NAME/build.zip"
      - aws s3 cp /tmp/build.zip s3://"$S3_BUCKET_NAME"/build.zip --region "$REGION"
      - echo "Sending SSM command to EC2 to deploy server bundle and restart service..."
      - |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "$EC2_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy Next.js SSR bundle" \
          --parameters commands='[
            "set -e",
            "echo ==== Starting deployment on instance $(hostname) ====",
            "echo Creating app directory if missing...",
            "mkdir -p '"$APP_DIR"'",
            "echo Stopping existing service if running...",
            "systemctl stop '"$SERVICE_NAME"' || true",
            "echo Cleaning app directory...",
            "rm -rf '"$APP_DIR"'/* || true",
            "echo Downloading build.zip from S3...",
            "cd /tmp",
            "aws s3 cp s3://'"$S3_BUCKET_NAME"'/build.zip ./build.zip --region '"$REGION"'",
            "echo Unzipping bundle...",
            "rm -rf /tmp/build || true",
            "mkdir -p /tmp/build",
            "unzip -o build.zip -d /tmp/build",
            "echo Copying files to app dir...",
            "cp -r /tmp/build/* '"$APP_DIR"'/",
            "echo Ensure Node is available (installing Node '"$NODE_VERSION_SETUP"' if missing)...",
            "if ! command -v node >/dev/null 2>&1; then curl -fsSL https://deb.nodesource.com/setup_'"$NODE_VERSION_SETUP"'.x | bash -; apt-get install -y nodejs; fi",
            "echo Installing production dependencies in app dir...",
            "cd '"$APP_DIR"'",
            "npm ci --production || true",
            "echo Creating systemd service file if missing...",
            "if [ ! -f /etc/systemd/system/'"$SERVICE_NAME"'.service ]; then cat > /etc/systemd/system/'"$SERVICE_NAME"'.service <<'SERVICE_EOF'\n[Unit]\nDescription=Wowcap Frontend (Next.js)\nAfter=network.target\n\n[Service]\nType=simple\nUser=ubuntu\nWorkingDirectory='"$APP_DIR"'\nEnvironment=NODE_ENV=production\nExecStart=/usr/bin/npm start\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICE_EOF\nfi",
            "echo Reloading systemd and restarting service...",
            "systemctl daemon-reload || true",
            "systemctl enable '"$SERVICE_NAME"' || true",
            "systemctl restart '"$SERVICE_NAME"'",
            "echo Cleaning temporary files...",
            "rm -rf /tmp/build /tmp/build.zip || true",
            "echo ==== Deployment finished ===="
          ]' \
          --region "$REGION" \
          --query "Command.CommandId" \
          --output text)
        echo "SSM Command ID: $COMMAND_ID"
        echo "Waiting for SSM command to complete..."
        aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$EC2_INSTANCE_ID" \
            --region "$REGION"
        echo "Fetching SSM command standard output..."
        aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$EC2_INSTANCE_ID" \
            --region "$REGION" \
            --query "StandardOutputContent" \
            --output text
        echo "Fetching SSM command error output..."
        aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$EC2_INSTANCE_ID" \
            --region "$REGION" \
            --query "StandardErrorContent" \
            --output text

artifacts:
  files:
    - /tmp/build.zip
